#################################
#             Shadows           #
#################################

# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
shadow = false;
shadow-radius = 0;
shadow-opacity = 0;
shadow-offset-x = 0;
shadow-offset-y = 0;

#################################
#           Fading              #
#################################

# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
fading = true;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-delta = 5;

fade-exclude = [
  "class_g = 'dmenu'"
]

#################################
#     Transparency / Opacity      #
#################################

# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
inactive-opacity = 1.0;
# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
frame-opacity = 1.0;
# Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
inactive-opacity-override = false;
# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1.0;

focus-exclude = [
  "class_g = 'Cairo-clock'",
  "class_g = 'dmenu'"
];

opacity-rule = [
  "90:class_g = 'Alacritty'",
  "90:class_g = 'code-oss'"
];

#################################
#       General Settings        #
#################################

# Specify the backend to use: `xrender`, `glx`, `egl` or `xr_glx_hybrid`.
# `xrender` is the default one.
backend = "glx";
# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
glx-no-stencil = true;
# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
glx-no-rebind-pixmap = true;
# Enable/disable VSync.
vsync = true;
# Refresh rate of your monitor (in Hz). Needed for --vsync.
refresh-rate = 60;
# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
use-damage = true;

#################################
#     Background-Blurring       #
#################################

# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
blur-method = "dual_kawase";
blur-strength = 3;
blur-background = false;
blur-background-frame = false;
blur-background-fixed = false;

blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "class_g = 'dmenu'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#       General Settings        #
#################################

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
mark-wmwin-focused = true;
# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
mark-ovredir-focused = true;
# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
detect-rounded-corners = true;
# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
detect-client-opacity = true;
# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
unredir-if-possible = true;
# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# Might have performance improvement on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
glx-use-copysubbuffermesa = true;
# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
xrender-sync-fence = true;

#################################
#           Logging             #
#################################

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
log-level = "warn";

#################################
#     Window type settings      #
#################################

wintypes:
{
  tooltip = { fade = true; shadow = false; opacity = 0.9; focus = true; full-shadow = false; };
  dock = { shadow = false; clip-shadow-above = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.9; }
  dropdown_menu = { opacity = 0.9; }
};

#################################
#          Animations           #
#################################
transition-length = 300
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#################################
#             Corners           #
#################################
corner-radius = 10.0;
rounded-corners-exclude = [
  "class_g = 'Polybar'",
  "class_g = 'dmenu'"
];

#################################
#       Performance Settings    #
#################################
unredir-if-possible-delay = 0;
unredir-if-possible-exclude = [
  "class_g = 'Firefox'",
  "class_g = 'mpv'"
];
